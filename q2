#include <stdio.h>

int main() {
    int matrix[5][5];
    int n, m;
    int i, j;
    int isSquare = 0, isZero = 1, isIdentity = 1, isDiagonal = 1, isScalar = 1;
    int isUpper = 1, isLower = 1, isSymmetric = 1, isSkew = 1;
    int isRow = 0, isColumn = 0, isSingular = 0;
    int isIdempotent = 1, isNilpotent = 1;
    int det = 0;

    printf("Enter number of rows and columns (max 5): ");
    scanf("%d %d", &n, &m);

    printf("Enter matrix elements:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    printf("\nMatrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%4d", matrix[i][j]);
        }
        printf("\n");
    }

    if (n == m)
        isSquare = 1;
    else
        printf("\nRectangular Matrix");

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            if (matrix[i][j] != 0)
                isZero = 0;

    if (isZero) {
        printf("\nZero Matrix");
        printf("\nNull Matrix");
    }

    if (isSquare) {
        int diagVal = matrix[0][0];
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (i != j && matrix[i][j] != 0)
                    isDiagonal = 0;
                if (i == j && matrix[i][j] != diagVal)
                    isScalar = 0;
                if ((i == j && matrix[i][j] != 1) || (i != j && matrix[i][j] != 0))
                    isIdentity = 0;
            }
        }
        if (isIdentity) printf("\nIdentity Matrix");
        if (isDiagonal) printf("\nDiagonal Matrix");
        if (isScalar && !isIdentity) printf("\nScalar Matrix");
    }

    if (isSquare) {
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++) {
                if (i > j && matrix[i][j] != 0)
                    isUpper = 0;
                if (i < j && matrix[i][j] != 0)
                    isLower = 0;
            }
        if (isUpper) printf("\nUpper Triangular Matrix");
        if (isLower) printf("\nLower Triangular Matrix");
    }

    if (isSquare) {
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++) {
                if (matrix[i][j] != matrix[j][i])
                    isSymmetric = 0;
                if (matrix[i][j] != -matrix[j][i])
                    isSkew = 0;
            }
        if (isSymmetric) printf("\nSymmetric Matrix");
        if (isSkew) printf("\nSkew-Symmetric Matrix");
    }

    if (n == 1 && m > 1) printf("\nRow Matrix");
    if (m == 1 && n > 1) printf("\nColumn Matrix");

    if (isSquare) {
        if (n == 2)
            det = matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0];
        else if (n == 3)
            det = matrix[0][0]*(matrix[1][1]*matrix[2][2] - matrix[1][2]*matrix[2][1]) -
                  matrix[0][1]*(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0]) +
                  matrix[0][2]*(matrix[1][0]*matrix[2][1] - matrix[1][1]*matrix[2][0]);
        if (det == 0)
            printf("\nSingular Matrix");
        else
            printf("\nNon-Singular Matrix");
    }

    if (isSquare) {
        int prod[5][5] = {0};
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                for (int k = 0; k < n; k++)
                    prod[i][j] += matrix[i][k] * matrix[k][j];

        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (prod[i][j] != matrix[i][j])
                    isIdempotent = 0;

        if (isIdempotent) printf("\nIdempotent Matrix");
    }

    if (isSquare) {
        int prod[5][5] = {0};
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                for (int k = 0; k < n; k++)
                    prod[i][j] += matrix[i][k] * matrix[k][j];

        int allZero = 1;
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (prod[i][j] != 0)
                    allZero = 0;
        if (allZero) printf("\nNilpotent Matrix");
    }

    printf("\n\nAnalysis Complete.\n");
    return 0;
}
